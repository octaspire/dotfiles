#+STARTIP: overview
* License and credits

  Octaspire dotfiles - Various configuration files
  Copyright 2017, 2018 www.octaspire.com

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This configuration file is based partially on a very nice [[https://www.youtube.com/watch?v%3D49kBWM3RQQ8][video tutorial series.]]

* Prerequisites
  Emacs 26.1 and internet connection, so that packages can be installed automatically
  using 'use-package'. Everything else is installed automatically, but not octaspire
  Dern mode. Please make sure that the ~/.emacs.d/elisp directory has the following file:
  octaspire-dern-mode.el. See *Completion packages* for instructions on
  installing tools needed for code completion. *Email* reading and sending
  are configured, if =mu= executable is found in the system.

  I *highly recommend* mapping of =CapsLock= into =Control= at the operating system
  level. It is usually very easily done (at least in UNIX like systems) and allows one
  to press CapsLock instead of Control in key-chords like =C-c C-j=. I think that
  it makes a great difference in usability and ergonomics. Another possibility is
  to use the evil-package, that gives quite good vi(m) emulation layer. This
  configuration does not use evil.

* Platform-specific configuration
** macOS
   Add some macOS specific keybindings:
   #+BEGIN_SRC emacs-lisp
   (setq mac-option-key-is-meta  nil)
   (setq mac-command-key-is-meta t)
   (setq mac-command-modifier    'meta)
   (setq mac-option-modifier     nil)
   #+END_SRC

   It seems to be that in macOS Emacs cannot find the homebrew installed aspell.
   #+BEGIN_SRC emacs-lisp
   (when (eq system-type 'darwin)
     (setq ispell-program-name "/usr/local/bin/aspell"))
   #+END_SRC
* Spellchecking
  #+BEGIN_SRC emacs-lisp
  (require 'flyspell)
  (setq-default flyspell-issue-message-flag nil) ; Don't print message word every word.
  #+END_SRC
* Packages
** pinentry
   #+BEGIN_SRC emacs-lisp
   (use-package pinentry
     :ensure t)
   #+END_SRC
** ace-window
   #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :ensure t
     :init
       (progn
         (global-set-key [remap other-window] 'ace-window)
         (custom-set-faces
           '(aw-leading-char-face
            ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind (("C-c M-c" . avy-goto-char)
            ("C-c M-l" . avy-goto-line)
            ("C-c M-t" . avy-goto-char-timer)))
   #+END_SRC
** completion packages
   The completion requires additional installation outside Emacs
   (/libclang/ and /global/). For example, in macOS =brew install llvm global=
   and in Ubuntu =sudo apt-get install libclang-5.0-dev global=.
   Then, inside Emacs, give command =M-x irony-install-server=.
*** irony-mode
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :ensure t
       :config
         (progn
           (defun octaspire-irony-mode-hook ()
             (define-key irony-mode-map [remap completion-at-point]
               'irony-completion-at-point-async)
             (define-key irony-mode-map [remap complete-symbol]
               'irony-completion-at-async))
           (add-hook 'c-mode-hook     'irony-mode)
           (add-hook 'irony-mode-hook 'octaspire-irony-mode-hook)
           (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))
   #+END_SRC
*** company-irony
   #+BEGIN_SRC emacs-lisp
     (use-package company-irony
       :ensure t)
   #+END_SRC
*** company
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :config
       (progn
         (setq company-idle-delay            nil)
         (setq company-minimum-prefix-length 2)
         (setq company-dabbrev-other-buffers 'all)
         (setq company-dabbrev-downcase      nil)
         (setq company-backends '((company-files company-irony company-gtags company-capf company-dabbrev company-ispell)))))
    #+END_SRC
** dashboard
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :config
       (progn
         (setq dashboard-startup-banner nil)
         (dashboard-setup-startup-hook)))
   #+END_SRC
** exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :config
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)))
   #+END_SRC
** expand-region
   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :config (global-set-key (kbd "C-c M-e") 'er/expand-region))
   #+END_SRC
** flx-ido
   #+BEGIN_SRC emacs-lisp
     (use-package flx-ido
       :ensure t
       :config
         (progn
           (ido-mode                     1)
           (ido-everywhere               1)
           (flx-ido-mode                 1)
           (setq ido-enable-flex-mathing t)
           (setq ido-use-faces           nil)))
   #+END_SRC
** goto-chg
   #+BEGIN_SRC emacs-lisp
   (use-package goto-chg
     :ensure t
     :bind
       (("C-c l" . goto-last-change)
        ("C-c ;" . goto-last-change-reverse)))
   #+END_SRC
** helm
   #+BEGIN_SRC emacs-lisp
   (use-package helm
     :ensure t
     :config (require 'helm-config))
   #+END_SRC
** highlight
   #+BEGIN_SRC emacs-lisp
   (use-package highlight
     :ensure t)
   #+END_SRC
** htmlize
   #+BEGIN_SRC emacs-lisp
     (use-package htmlize
       :ensure t)
   #+END_SRC
** keychain-environment
   #+BEGIN_SRC emacs-lisp
   (use-package keychain-environment
     :ensure t)
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :bind (("C-x g" . magit-status)))
   #+END_SRC
** operate-on-number
   #+BEGIN_SRC emacs-lisp
   (use-package operate-on-number
     :ensure t
     :bind (("C-c n" . operate-on-number-at-point)))
   #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
** ox-twbs
   #+BEGIN_SRC emacs-lisp
   (use-package ox-twbs
     :ensure t)
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
         (progn
           (setq projectile-enable-caching         t)
           (setq projectile-indexing-method        'native)
           (setq projectile-globally-ignored-files (append
             '(".o" ".so" ".dylib" ".lib" ".dll")))
           (projectile-mode)))
   #+END_SRC
** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :config
       (progn (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
              (add-hook 'octaspire-dern-mode-hook #'rainbow-delimiters-mode)))
   #+END_SRC
** smart-mode-line
   #+BEGIN_SRC emacs-lisp
   (use-package smart-mode-line
     :ensure t
     :config
       (progn
         (setq sml/no-confirm-load-theme t)
         (setq sml/theme 'light)
         (setq sml/shorten-directory t)
         (setq sml/shorten-modes     t)
         (setq sml/name-width        5)
         (setq sml/mode-width        5)
         (sml/setup)))
   #+End_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :config (yas-global-mode 1))
   #+END_SRC
** yasnippet-snippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet-snippets
     :ensure t)
   #+END_SRC
** zoom-window
   #+BEGIN_SRC emacs-lisp
   (use-package zoom-window
     :ensure t
     :bind   (("M-C-z" . zoom-window-zoom))
     :config (custom-set-variables '(zoom-window-mode-line-color "LightGreen")))
   #+END_SRC
** slime
   #+BEGIN_SRC emacs-lisp
   (use-package slime
     :ensure t)
   #+END_SRC
** mu4e
*** Check if mu is installed
    #+BEGIN_SRC emacs-lisp
    (defvar octaspire-config-mu-found (executable-find "mu"))
    #+END_SRC
*** Receiving mail
   Use /mu4e/ for handling email in GNU Emacs. This requires installation
   of /mu/ and /offlineimap/ packages using the operating system's package
   manager. The =load-path= below might also be different in different systems
   and might require tweaking.

   Packages /mu/ and /offlineimap/ can be installed in OpenBSD with command:

   #+BEGIN_SRC sh
   sudo pkg_add mu offlineimap
   #+END_SRC

   Command above installs both /mu/ and /mu4e/, so there is no need
   to install /mu4e/ with =use-package=.

   /offlineimap/ should then be configured by creating a =~/.offlineimaprc= file
   and filling in the suitable configuration values. /offlineimap/ can be
   run in the background either with a detached tmux session or with a
   service, so that email is checked periodically. Or it can be run manually
   just for once. It can be started with command:

   #+BEGIN_SRC sh
   offlineimap
   #+END_SRC

   The commands below make sure that /mu4e/ is loaded and available
   in GNU Emacs:

   #+BEGIN_SRC emacs-lisp
   (if octaspire-config-mu-found
     (progn
       (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
       (require 'mu4e)))
   #+END_SRC

   /mu4e/ can be started with =M-x mu4e=.

*** Sending mail
    To be able to send email, the environment variables used in the
    block below (things starting with 'getenv') must be defined
    somewhere, for example in the =~/.profile= file.

   #+BEGIN_SRC emacs-lisp
   (if octaspire-config-mu-found
     (progn
       (setq message-send-mail-function   'smtpmail-send-it)
       (setq smtpmail-smtp-server         (getenv "OCTASPIRE_SMTP_SERVER_ADDR"))
       (setq smtpmail-default-smtp-server (getenv "OCTASPIRE_SMTP_SERVER_ADDR"))
       (setq smtpmail-smtp-service        (getenv "OCTASPIRE_SMTP_SERVER_PORT"))
       (setq smtpmail-smtp-user           (getenv "OCTASPIRE_SMTP_USER"))
       (setq smtpmail-local-domain        (getenv "OCTASPIRE_SMTP_LOCAL_DOMAIN"))

       ; Use the next line, if your email server takes care of saving sent messages
       ; into 'Sent Messages'.
       (setq mu4e-sent-messages-behavior  'delete)

       (setq message-kill-buffer-on-exit  t)))
   #+END_SRC

* Interface tweaks
** UI
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message     t)             ; Do not show startup screen.
   (tool-bar-mode                   -1)             ; Hide tool bar.
   (menu-bar-mode                   -1)             ; Hide menu bar.
   (scroll-bar-mode                 -1)             ; Hide scroll bar.
   (defalias 'yes-or-no-p           'y-or-n-p)      ; Save typing when answering confirmations.
   (global-hl-line-mode              1)             ; Highlight current line.
   (load-theme 'leuven)                             ; Load color theme.
   (set-face-attribute 'default nil  :height 120)   ; Change font size.
   (column-number-mode               1)             ; Show current column number.
   (setq-default truncate-lines      1)             ; Truncate long lines.
   (setq visible-bell                1)             ; Disable bell sound.
   (setq display-time-24hr-format    t)             ; Display time in 24 hour format.
   (setq display-battery-mode        t)             ; Display battery charge on the mode-line.
   (setq suggest-key-bindings        4)             ; Show key binding suggestions for N seconds.
   (setq transient-mark-mode         nil)           ; Disable transient mark mode.
   (display-time-mode                1)             ; Display current time in the modeline.
   (which-function-mode              1)             ; Show the name of the current function.
   (show-paren-mode                  1)             ; Highlight delimiter pairs.
   (winner-mode                      1)             ; Undo and redo window configurations.
   (put 'scroll-left      'disabled  nil)           ; Enable horizontal scrolling.
   (put 'narrow-to-region 'disabled  nil)           ; Enable narrowing to a region.
   (put 'narrow-to-page   'disabled  nil)           ; Enable narrowing to a page.
   (windmove-default-keybindings)                   ; Allow moving between windows.
   #+END_SRC
** Editing and history
   Files should usually end with a newline, unless the syntax of the file
   forbids that - it makes UNIX tools to behave correctly with the file.

   However, ask before adding a newline in a file that does not end in one.
   #+BEGIN_SRC emacs-lisp
   (setq-default require-final-newline 'ask)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (set-language-environment      "UTF-8")
   (global-auto-revert-mode       1)                      ; Revert buffer automatically when file changes on filesystem.
   (setq auto-revert-interval     60)                     ; Wait a bit longer before reverting buffers.
   (setq global-auto-revert-non-file-buffers 1)           ; Auto revert also non-file buffers.
   (save-place-mode               1)                      ; When visiting a file, point goes to the last point of previous visit.
   (savehist-mode                 1)                      ; Save history.
   (electric-pair-mode            1)                      ; Close delimiters automatically.
   (put 'upcase-region   'disabled nil)                   ; Enable upcase-region.
   (put 'downcase-region 'disabled nil)                   ; Enable downcase-region.
   (global-set-key [remap dabbrev-expand] 'hippie-expand) ; Use Hippie Expand instead of DAbbrev.
   #+END_SRC
** Completion
   #+BEGIN_SRC emacs-lisp
   (setq completion-cycle-threshold 4) ; Cycle completions when N or fewer alternatives.
   #+END_SRC
** apropos
   #+BEGIN_SRC emacs-lisp
   (setq apropos-sort-by-scores   t)             ; Sort apropos results by relevancy.
   #+END_SRC
** artist
   #+BEGIN_SRC emacs-lisp
   ; Fix accessing the context menu of artist-mode in macOS.
   (eval-after-load "artist"
     '(define-key artist-mode-map [down-mouse-3] 'artist-mouse-choose-operation))
   #+END_SRC
** shell
*** term
   For example in =ansi-term=, one can use the key-chords =C-c C-j= and =C-c C-k= to
   change between line and char mode. However, it can be difficult to remember
   when one or the other must be pressed and might require checking the mode
   line for the current mode. Because of this, we map
   =C-c C-j= to a new function, that just toggles between the line and
   char mode. This leaves also =C-c C-k= free to be rebound in
   =term-mode-map= (line mode) and =term-raw-map= (char mode).

   #+BEGIN_SRC emacs-lisp
   (require 'term)

   (defun octaspire/term-mode-toggle ()
      "Toggle between terminal's line and char modes."
      (interactive)
      (if (term-in-line-mode) (term-char-mode) (term-line-mode)))

   (define-key term-mode-map (kbd "C-c C-j") 'octaspire/term-mode-toggle) ; Remap in line mode.
   (define-key term-raw-map  (kbd "C-c C-j") 'octaspire/term-mode-toggle) ; Remap in char mode.
#+END_SRC

*** misc.
   Make =rgrep= to work with fish shell.
   #+BEGIN_SRC emacs-lisp
        (setq shell-file-name "/bin/sh")
   #+END_SRC
** Eshell
*** The Plan9 Smart Shell
    This configuration is based on an example and comment
    at [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Eshell. ]]
    #+BEGIN_SRC emacs-lisp
    (require 'eshell)
    (require 'em-smart)
    (setq eshell-where-to-jump          'begin)
    (setq eshell-review-quick-commands   nil)
    (setq eshell-smart-space-goes-to-end t)
    (add-hook 'eshell-mode-hook 'eshell-smart-initialize)
    #+END_SRC
*** Aliases
    #+BEGIN_SRC emacs-lisp
    (add-hook 'eshell-mode-hook (lambda ()
      (eshell/alias "e" "find-file-other-window $1")
      (eshell/alias "d" "dired-other-window $1")))
    #+END_SRC
*** No need for a pager
    There is no need for an external pager because of the Plan9 Smart Shell.
    #+BEGIN_SRC emacs-lisp
    (setenv "PAGER" "cat")
    #+END_SRC
*** Clear
    This is from [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][github/howardabrams/dot-files]].
    #+BEGIN_SRC emacs-lisp
    (defun eshell/clear ()
      "Clear the eshell buffer."
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))
    #+END_SRC
** Tramp
   #+BEGIN_SRC emacs-lisp
   (setq tramp-default-method "ssh")
   #+END_SRC
** dired-x
  Enable /dired-x/ package. =F= visits all marked files (each in its own
  window). =C-u F= opens them in the background.
  #+BEGIN_SRC emacs-lisp
      (require 'dired-x)
  #+END_SRC
** Calendar
   Start weeks from Monday.

   #+BEGIN_SRC emacs-lisp
   (setq calendar-week-start-day 1)
   #+END_SRC
* Backups and autosaves
  Save all backups into one directory, disable autosaves and
  make all commands modifying bookmarks also to save them.
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-default      nil)
  (setq bookmark-save-flag     1)
  #+END_SRC
* Symbolic links
  Always follow symbolic links without being prompted.
  #+BEGIN_SRC emacs-lisp
    (setq vc-follow-symlinks t)
  #+END_SRC
* Coding style
** Common
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** C
   #+BEGIN_SRC emacs-lisp
   (setq-default c-default-style "bsd" c-basic-offset 4 indent-tabs-mode nil)
   (c-set-offset 'case-label '+) ; Indent 'case' labels in switch statements.
   #+END_SRC
* Functions
** Terminal-mode
  #+BEGIN_SRC emacs-lisp
    (defun octaspire/terminal-mode-settings ()
      "Turn on settings for terminal mode."
      (interactive)
      (setq-local whitespace-mode -1)
      (setq-local global-hl-line-mode (null global-hl-line-mode))
      (setq-local show-trailing-whitespace (null show-trailing-whitespace))
      (linum-mode -1))
  #+END_SRC
** Window layout
   #+BEGIN_SRC emacs-lisp
    (defun octaspire/layout-2-windows ()
      "Create layout with two windows."
      (interactive)
      (split-window-right)
      (balance-windows))
    (defun octaspire/layout-3-windows ()
      "Create layout with three windows."
      (interactive)
      (split-window-right)
      (split-window-right)
      (balance-windows)
      (other-window 1))
   #+END_SRC
** Workspace
*** 2 windows
    #+BEGIN_SRC emacs-lisp
    (defun octaspire/workspace-2-windows-ansi ()
      "Create workspace with octaspire/layout-2-windows"
      (interactive)
      (octaspire/layout-2-windows)
      (ansi-term "fish")
      (octaspire/terminal-mode-settings)
      (other-window -1)
      (switch-to-buffer "scratch"))
    (defun octaspire/workspace-2-windows-eshell ()
      "Create workspace with octaspire/layout-2-windows"
      (interactive)
      (octaspire/layout-2-windows)
      (eshell)
      (octaspire/terminal-mode-settings)
      (other-window -1)
      (switch-to-buffer "scratch"))
    #+END_SRC
*** 3 windows
    #+BEGIN_SRC emacs-lisp
    (defun octaspire/workspace-3-windows-ansi ()
      "Create workspace with octaspire/layout-3-windows"
      (interactive)
      (octaspire/layout-3-windows)
      (switch-to-buffer "scratch")
      (other-window -1)
      (ansi-term "fish")
      (octaspire/terminal-mode-settings)
      (other-window 2)
      (switch-to-buffer "scratch")
      (other-window -1))
    (defun octaspire/workspace-3-windows-eshell ()
      "Create workspace with octaspire/layout-3-windows"
      (interactive)
      (octaspire/layout-3-windows)
      (switch-to-buffer "scratch")
      (other-window -1)
      (eshell)
      (octaspire/terminal-mode-settings)
      (other-window 2)
      (switch-to-buffer "scratch")
      (other-window -1))
    #+END_SRC
** Initialization-file
   #+BEGIN_SRC emacs-lisp
    (defun octaspire/init-file-load ()
      "(Re)Load Emacs initialization file."
      (interactive)
      (load-file user-init-file))
    (defun octaspire/init-file-open ()
      "Visit Emacs initialization file."
      (interactive)
      (find-file "~/.emacs.d/myinit.org"))
   #+END_SRC
** Editing
*** Opening lines
    #+BEGIN_SRC emacs-lisp
      (defun octaspire/line-open-above ()
        "Open new empty line above the line that has Point."
        (interactive)
        (beginning-of-line)
        (newline)
        (forward-line -1)
        (indent-according-to-mode))
      (defun octaspire/line-open-below ()
        "Open new empty line below the line that has Point."
        (interactive)
        (end-of-line)
        (newline-and-indent))
    #+END_SRC
*** Copying lines
    #+BEGIN_SRC emacs-lisp
      (defun octaspire/line-copy ()
        "Copy the line that has Point."
        (interactive)
        (save-excursion
          (beginning-of-line)
          (set-mark-command nil)
          (end-of-line)
          (kill-ring-save 0 0 t))
          (message "Line copied"))
    #+END_SRC
*** Buffers
    Kill all other buffers than the current one. This function is from
    [[https://www.emacswiki.org/emacs/KillingBuffers][EmacsWiki.]]
    #+BEGIN_SRC emacs-lisp
    (defun kill-other-buffers ()
      "Kill all other buffers than the current one."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
    #+END_SRC
** Searching
   #+BEGIN_SRC emacs-lisp
     (defun octaspire/search-symbol-at-point ()
       "Do a search for the symbol at the Point, including words that have '.' or '-' after them."
       (interactive)
       (isearch-forward-word nil 1)
       (isearch-yank-string (thing-at-point 'symbol)))
   #+END_SRC
** Tramp
   This function is from the book /Mastering Emacs/ by Mickey Petersen.
   When invoked as =M-x sudo=, it uses =TRAMP= to edit the current file
   as *root*.
   #+BEGIN_SRC emacs-lisp
     (defun sudo ()
       "Use TRAMP to 'sudo' the current buffer"
       (interactive)
       (when buffer-file-name
         (find-alternate-file
          (concat "/sudo:root@localhost:"
                  buffer-file-name))))
   #+END_SRC
** TAGS
   Find existing TAGS file by searching parent directories. This function
   is based on code from: https://www.emacswiki.org/emacs/EmacsTags
   #+BEGIN_SRC emacs-lisp
   (defun tags-file-find ()
     "Find existing TAGS file by searching parent directories"
     (interactive)
     (let ((my-tags-file (locate-dominating-file default-directory "TAGS")))
       (when my-tags-file
         (message "Loading TAGS file: %s" my-tags-file)
         (visit-tags-table my-tags-file))))
   #+END_SRC
** After init
   #+BEGIN_SRC emacs-lisp
   (defun octaspire/after-init-hook ()
     (setq debug-on-error t)
     (global-company-mode))
   #+END_SRC
** Debugging
   #+BEGIN_SRC emacs-lisp
   (defun octaspire/gdb-hints-break ()
     "Show quick reminder on how to set a breakpoint in GNU debugger conditionally."
     (interactive)
     (message "break test.c:6 if i == 5\nbreak test.c:label if i == 5"))
   #+END_SRC
** Whitespace
  #+BEGIN_SRC emacs-lisp
    (defun octaspire/whitespace-mode-enable ()
        "Turn on highlighting of bad white-space for programming modes."
      (interactive)
      (require 'whitespace)
      (modify-face                            whitespace-tab nil "#F92672")
      (set-face-background                    'trailing-whitespace "yellow")
      (defface extra-whitespace-face          '((t (:background "pale green"))) "Color for tabs and such.")
      (set-face-attribute 'whitespace-line nil :background "cyan")
      (defvar  bad-whitespace                 '(("\t" . 'extra-whitespace-face)))
      (setq-local show-trailing-whitespace    1)
      (setq-local whitespace-line-column      110)
      (setq-local whitespace-style            '(face tabs trailing lines lines-tail tab-mark))
      (setq-local whitespace-mode             1)
      (whitespace-mode))
  #+END_SRC
* Hooks
** After init
   #+BEGIN_SRC emacs-lisp
   (add-hook 'after-init-hook 'octaspire/after-init-hook)
   #+END_SRC
** Text
   #+BEGIN_SRC emacs-lisp
   (add-hook 'text-mode-hook 'flyspell-mode)
   #+END_SRC
** Programming
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'flyspell-prog-mode)
   (add-hook 'prog-mode-hook 'octaspire/whitespace-mode-enable)
   #+END_SRC
** C
  #+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook #'(lambda () (progn (modify-syntax-entry ?_ "w")
                                             (setq comment-start "//" comment-end ""))))
  #+END_SRC
** XML
   #+BEGIN_SRC emacs-lisp
   (add-hook 'nxml-mode-hook 'octaspire/whitespace-mode-enable)
   #+END_SRC

* Org-mode
*** Export and syntax highlighting
  #+BEGIN_SRC emacs-lisp
  (setq-default org-src-fontify-natively      1) ; syntax highlight code blocks.
  (setq-default org-export-with-smart-quotes  1)
  (setq-default org-html-htmlize-output-type 'inline-css)
  (setq org-export-html-style-include-scripts nil)
  (setq org-export-html-style-include-default nil)
  #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp
    (define-key org-mode-map (kbd "C-c M-l") nil) ; Use custom keybinding instead.
    #+END_SRC
* Abbreviations
  #+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode  1)
  (setq-default save-abbrevs 'silently)
  #+END_SRC
* Keybindings
** New bindings
*** Workspace
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a 2") 'octaspire/workspace-2-windows-ansi)
  (global-set-key (kbd "C-c a 3") 'octaspire/workspace-3-windows-ansi)

  (global-set-key (kbd "C-c e 2") 'octaspire/workspace-2-windows-eshell)
  (global-set-key (kbd "C-c e 3") 'octaspire/workspace-3-windows-eshell)
  #+END_SRC
*** Initialization-file
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i o") 'octaspire/init-file-open)
  (global-set-key (kbd "C-c i l") 'octaspire/init-file-load)
  #+END_SRC
*** Editing
**** Erasing
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c w") 'fixup-whitespace) ; Delete excess whitespace around objects.
     #+END_SRC
**** Opening and joining lines
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c O")   'octaspire/line-open-above)
   (global-set-key (kbd "C-c o")   'octaspire/line-open-below)
   (global-set-key (kbd "C-c j")   'join-line)
   #+END_SRC
**** Copying lines
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c k")   'octaspire/line-copy)
   #+END_SRC
**** Scrolling without moving the point
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
     (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
     #+END_SRC
**** Keyboard macros
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<print>") 'kmacro-call-macro)
     #+END_SRC
*** Searching
    =M-x find-name-dired= allows one to find a file or files recursively
    starting from a specific directory. The file name to be searched
    is a shell wildcard. Add a key-chord for it.

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c f") 'find-name-dired)
    #+END_SRC

    Search (forward) for the symbol below the point.

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c s") 'octaspire/search-symbol-at-point)
    #+END_SRC
*** Completion
    #+BEGIN_SRC emacs-lisp
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (global-set-key (kbd "C-c c") 'company-complete-common)
    #+END_SRC
*** TAGS
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-*") 'pop-tag-mark)
  (global-set-key (kbd "M-,") 'tags-loop-continue)
  #+END_SRC
*** C-mode
    #+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-common-hook
      (lambda () (define-key c-mode-base-map (kbd "C-c `")   'compile)
                 (define-key c-mode-base-map (kbd "C-c M-`") 'recompile)))
    #+END_SRC
*** Debugging
    Emacs offers a nice UI for the GNU debugger. Add a key-chord
    for starting the =gud-gdb= and also for a hint function:

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c d") 'gud-gdb)
    (global-set-key (kbd "C-c g") 'octaspire/gdb-hints-break)
    #+END_SRC

** Overriding existing bindings
*** Indenting
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c TAB") 'indent-relative)
     #+END_SRC
*** Misc
   #+BEGIN_SRC emacs-lisp
   ; Kill the current buffer instead of asking which buffer to kill.
   (global-set-key (kbd "C-x k")   'kill-this-buffer)

   ; Override the default binding in "M-o" with ace-window because
   ; switching windows is done a lot and it is shorter to enter
   ; than the default "C-x o".
   (global-set-key (kbd "M-o")     'ace-window)
   #+END_SRC
* Additional modes
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elisp")
  ; Octaspire Dern mode.
  (require 'octaspire-dern-mode)
  #+END_SRC
* GPG2
  #+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)
  #+END_SRC
