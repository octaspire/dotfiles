#+STARTIP: overview
* License and credits

  Octaspire dotfiles - Various configuration files
  Copyright 2017, 2018 www.octaspire.com

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This configuration file is based partially on a very nice [[https://www.youtube.com/watch?v%3D49kBWM3RQQ8][video tutorial series.]]

* Prerequisites
  Emacs 25 and internet connection, so that packages can be installed automatically
  using 'use-package'. Everything else is installed automatically, but not octaspire
  Dern mode. Please make sure that the ~/.emacs.d/elisp directory has the following file:
  octaspire-dern-mode.el
* Platform-specific configuration
** macOS
   It seems to be that in macOS Emacs cannot find the homebrew installed aspell.
   #+BEGIN_SRC emacs-lisp
   (when (eq system-type 'darwin)
     (setq ispell-program-name "/usr/local/bin/aspell"))
   #+END_SRC
* Interface tweaks
** UI
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message  t)             ; Do not show startup screen.
   (tool-bar-mode                -1)             ; Hide tool bar.
   (menu-bar-mode                -1)             ; Hide menu bar.
   (scroll-bar-mode              -1)             ; Hide scroll bar.
   (defalias 'yes-or-no-p        'y-or-n-p)      ; Save typing when answering confirmations.
   (global-hl-line-mode           1)             ; Highlight current line.
   (column-number-mode            1)             ; Show current column number.
   (setq visible-bell             1)             ; Disable bell sound.
   (setq display-time-24hr-format t)             ; Display time in 24 hour format.
   (display-time-mode             1)             ; Display current time in the modeline.
   (which-function-mode           1)             ; Show the name of the current function.
   (show-paren-mode               1)             ; Highlight delimiter pairs.
   (winner-mode                   1)             ; Undo and redo window configurations.
   (windmove-default-keybindings)                ; Allow moving between windows.
#+END_SRC
** Editing and history
   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode       1)             ; Revert buffer automatically when file changes on filesystem.
   (save-place-mode               1)             ; When visiting a file, point goes to the last point of previous visit.
   (savehist-mode                 1)             ; Save history.
   (electric-pair-mode            1)             ; Close delimiters automatically.
   #+END_SRC
** apropos
   #+BEGIN_SRC emacs-lisp
   (setq apropos-sort-by-scores   t)             ; Sort apropos results by relevancy.
   #+END_SRC
** artist
   #+BEGIN_SRC emacs-lisp
   ; Fix accessing the context menu of artist-mode in macOS.
   (eval-after-load "artist"
     '(define-key artist-mode-map [down-mouse-3] 'artist-mouse-choose-operation))
   #+END_SRC
** ido-mode
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching  t)
     (setq ido-everywhere            t)
     (setq ido-use-filename-at-point 'guess)
     (ido-mode                       1)
   #+END_SRC
* Spellchecking
  #+BEGIN_SRC emacs-lisp
  (require 'flyspell)
  (setq-default flyspell-issue-message-flag nil) ; Don't print message word every word.
  #+END_SRC
* Whitespace
  #+BEGIN_SRC emacs-lisp
  ; Highlight bad whitespace.
  (require 'whitespace)
  (global-whitespace-mode                 1)
  (modify-face                            whitespace-tab nil "#F92672")
  (set-face-background                    'trailing-whitespace "yellow")
  (defface extra-whitespace-face          '((t (:background "pale green"))) "Color for tabs and such.")
  (defvar  bad-whitespace                 '(("\t" . 'extra-whitespace-face)))
  (setq-default show-trailing-whitespace  1)
  (setq-default whitespace-line-column    110)
  (setq-default whitespace-style          '(face tabs trailing lines lines-tail tab-mark))
  #+END_SRC
* Packages
** try
   Try packages without installing them. 
   #+BEGIN_SRC emacs-lisp
       (use-package try
         :ensure t)
   #+END_SRC
** which-key
   Give information about available keybindings.
   #+BEGIN_SRC emacs-lisp
       (use-package which-key
         :ensure t
         :config (which-key-mode))
   #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
** ace-window
   #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :ensure t
     :init
       (progn
         (global-set-key [remap other-window] 'ace-window)
         (custom-set-faces
           '(aw-leading-char-face
            ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind ("M-p" . avy-goto-char))
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :config
       (progn
         (global-company-mode)
         (add-to-list 'company-backends 'company-capf)))
    #+END_SRC
** ox-twbs
   #+BEGIN_SRC emacs-lisp
   (use-package ox-twbs
     :ensure t)
   #+END_SRC
** highlight
   #+BEGIN_SRC emacs-lisp
   (use-package highlight
     :ensure t)
   #+END_SRC
** htmlize
   #+BEGIN_SRC emacs-lisp
     (use-package htmlize
       :ensure t)
   #+END_SRC
** goto-chg
   #+BEGIN_SRC emacs-lisp
   (use-package goto-chg
     :ensure t
     :bind
       (("C-<" . goto-last-change)
        ("C->" . goto-last-change-reverse)))
   #+END_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :config (yas-global-mode 1))
   #+END_SRC
** yasnippet-snippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet-snippets
     :ensure t)
   #+END_SRC
** undo-tree
   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :ensure t
     :init (global-undo-tree-mode))
   #+END_SRC
** beacon
   #+BEGIN_SRC emacs-lisp
   (use-package beacon
     :ensure t
     :config (beacon-mode 1))
   #+END_SRC
** expand-region
   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :config (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :bind (("C-x g" . magit-status)))
   #+END_SRC
** keychain-environment
   #+BEGIN_SRC emacs-lisp
   (use-package keychain-environment
     :ensure t)
   #+END_SRC
** linum-relative
   #+BEGIN_SRC emacs-lisp
   (use-package linum-relative
     :ensure t
     :config
       (progn
         (linum-mode)
         (linum-relative-global-mode)
         (setq-default linum-relative-current-symbol "")))
   #+END_SRC
** operate-on-number
   #+BEGIN_SRC emacs-lisp
   (use-package operate-on-number
     :ensure t
     :bind (("C-c n" . operate-on-number-at-point)))
   #+END_SRC
** smart-mode-line
   #+BEGIN_SRC emacs-lisp
   (use-package smart-mode-line
     :ensure t
     :config
       (progn
         (setq sml/no-confirm-load-theme t)
         (setq sml/theme 'light)
         (sml/setup)))
   #+End_SRC
** zoom-window
   #+BEGIN_SRC emacs-lisp
   (use-package zoom-window
     :ensure t
     :bind   (("M-C-z" . zoom-window-zoom))
     :config (custom-set-variables '(zoom-window-mode-line-color "LightGreen")))
   #+END_SRC
* Backups and autosaves
  Save all backups into one directory. Disable autosaves.
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-default nil)
  #+END_SRC

* Symbolic links
  Always follow symbolic links without being prompted.
  #+BEGIN_SRC emacs-lisp
    (setq vc-follow-symlinks t)
  #+END_SRC
* Coding style
** Common
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** C
   #+BEGIN_SRC emacs-lisp
   (setq-default c-default-style "bsd" c-basic-offset 4 indent-tabs-mode nil)
   #+END_SRC
* Hooks
** Text
   #+BEGIN_SRC emacs-lisp
   (add-hook 'text-mode-hook 'flyspell-mode)
   #+END_SRC
** Programming
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'flyspell-prog-mode)
   #+END_SRC
** C
  #+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
  #+END_SRC
* Org-mode
  #+BEGIN_SRC emacs-lisp
  (setq-default org-src-fontify-natively      1) ; syntax highlight code blocks.
  (setq-default org-export-with-smart-quotes  1)
  (setq-default org-html-htmlize-output-type 'inline-css)
  #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
  (load-theme 'leuven t)  
  #+END_SRC
* Abbreviations
  #+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode  1)
  (setq-default save-abbrevs 'silently)
  #+END_SRC
* Functions
** Terminal-mode
  #+BEGIN_SRC emacs-lisp
    (defun octaspire/terminal-mode-settings ()
      "Turn on settings for terminal mode."
      (interactive)
      (setq-local whitespace-mode -1)
      (setq-local global-hl-line-mode (null global-hl-line-mode))
      (setq-local show-trailing-whitespace (null show-trailing-whitespace))
      (linum-mode -1))
  #+END_SRC
** Window layout
   #+BEGIN_SRC emacs-lisp
    (defun octaspire/layout-2-windows ()
      "Create layout with two windows."
      (interactive)
      (split-window-right)
      (balance-windows))
    (defun octaspire/layout-3-windows ()
      "Create layout with three windows."
      (interactive)
      (split-window-right)
      (split-window-right)
      (balance-windows)
      (other-window 1))
   #+END_SRC
** Workspace
*** 2 windows
    #+BEGIN_SRC emacs-lisp
    (defun octaspire/workspace-2-windows-ansi ()
      "Create workspace with octaspire/layout-2-windows"
      (interactive)
      (octaspire/layout-2-windows)
      (ansi-term "fish")
      (octaspire/terminal-mode-settings)
      (other-window -1)
      (switch-to-buffer "scratch"))
    (defun octaspire/workspace-2-windows-eshell ()
      "Create workspace with octaspire/layout-2-windows"
      (interactive)
      (octaspire/layout-2-windows)
      (eshell)
      (octaspire/terminal-mode-settings)
      (other-window -1)
      (switch-to-buffer "scratch"))
    #+END_SRC
*** 3 windows
    #+BEGIN_SRC emacs-lisp
    (defun octaspire/workspace-3-windows-ansi ()
      "Create workspace with octaspire/layout-3-windows"
      (interactive)
      (octaspire/layout-3-windows)
      (switch-to-buffer "scratch")
      (other-window -1)
      (ansi-term "fish")
      (octaspire/terminal-mode-settings)
      (other-window 2)
      (switch-to-buffer "scratch")
      (other-window -1))
    (defun octaspire/workspace-3-windows-eshell ()
      "Create workspace with octaspire/layout-3-windows"
      (interactive)
      (octaspire/layout-3-windows)
      (switch-to-buffer "scratch")
      (other-window -1)
      (eshell)
      (octaspire/terminal-mode-settings)
      (other-window 2)
      (switch-to-buffer "scratch")
      (other-window -1))
    #+END_SRC
** Initialization-file
   #+BEGIN_SRC emacs-lisp
    (defun octaspire/init-file-load ()
      "(Re)Load Emacs initialization file."
      (interactive)
      (load-file user-init-file))
    (defun octaspire/init-file-open ()
      "Visit Emacs initialization file."
      (interactive)
      (find-file "~/.emacs.d/myinit.org"))
   #+END_SRC
** Editing
*** Opening lines
    #+BEGIN_SRC emacs-lisp
      (defun octaspire/line-open-above ()
        "Open new empty line above the line that has Point."
        (interactive)
        (beginning-of-line)
        (newline)
        (forward-line -1)
        (indent-according-to-mode))
      (defun octaspire/line-open-below ()
        "Open new empty line below the line that has Point."
        (interactive)
        (end-of-line)
        (newline-and-indent))
    #+END_SRC
*** Copying lines
    #+BEGIN_SRC emacs-lisp
      (defun octaspire/line-copy ()
        "Copy the line that has Point."
        (interactive)
        (save-excursion
          (beginning-of-line)
          (set-mark-command nil)
          (end-of-line)
          (kill-ring-save 0 0 t))
          (message "Line copied"))
    #+END_SRC
** Searching
   #+BEGIN_SRC emacs-lisp
     (defun octaspire/search-symbol-at-point ()
       "Do a search for the symbol at the Point, including words that have '.' or '-' after them."
       (interactive)
       (isearch-forward-word nil 1)
       (isearch-yank-string (thing-at-point 'symbol)))
   #+END_SRC
* Keybindings
** New bindings
*** Workspace
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a 2") 'octaspire/workspace-2-windows-ansi)
  (global-set-key (kbd "C-c a 3") 'octaspire/workspace-3-windows-ansi)

  (global-set-key (kbd "C-c e 2") 'octaspire/workspace-2-windows-eshell)
  (global-set-key (kbd "C-c e 3") 'octaspire/workspace-3-windows-eshell)
  #+END_SRC
*** Initialization-file
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i o") 'octaspire/init-file-open)
  (global-set-key (kbd "C-c i l") 'octaspire/init-file-load)
  #+END_SRC
*** Editing
**** Opening lines
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c O")   'octaspire/line-open-above)
   (global-set-key (kbd "C-c o")   'octaspire/line-open-below)
   #+END_SRC
**** Copying lines
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c k")   'octaspire/line-copy)
   #+END_SRC
*** Searching
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c s") 'octaspire/search-symbol-at-point)
    #+END_SRC
*** Completion
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c c") 'company-complete)
    #+END_SRC
** Overriding existing bindings
   #+BEGIN_SRC emacs-lisp
   ; Kill the current buffer instead of asking which buffer to kill.
   (global-set-key (kbd "C-x k")   'kill-this-buffer)

   ; Override the default binding in "M-o" with ace-window because
   ; switching windows is done a lot and it is shorter to enter
   ; than the default "C-x o".
   (global-set-key (kbd "M-o")     'ace-window)
   #+END_SRC
* Additional modes
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elisp")
  ; Octaspire Dern mode.
  (require 'octaspire-dern-mode)
  #+END_SRC
